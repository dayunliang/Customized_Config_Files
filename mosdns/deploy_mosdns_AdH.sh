#!/bin/sh
set -e  # ÈÅáÂà∞‰ªª‰ΩïÈîôËØØÁ´ãÂç≥ÈÄÄÂá∫ËÑöÊú¨ÊâßË°å

# ÂÆö‰πâ‰∏â‰∏™‰∏ªË¶ÅÊúçÂä°ÁõÆÂΩïÂèòÈáè
MOSDNS_DIR="$HOME/mosdns"         # MosDNS Â∑•‰ΩúÁõÆÂΩï
ADH_CN_DIR="$HOME/AdH_CN"         # AdGuardHome ÂõΩÂÜÖËäÇÁÇπÈÖçÁΩÆÁõÆÂΩï
ADH_GFW_DIR="$HOME/AdH_GFW"       # AdGuardHome GFW ËäÇÁÇπÈÖçÁΩÆÁõÆÂΩï
CRONTAB_FILE="/etc/crontabs/root" # Alpine Á≥ªÁªü‰∏≠ crontab Êñá‰ª∂Ë∑ØÂæÑ

# ==================================================================
# ÂáΩÊï∞ÔºöÊ£ÄÊü•Âπ∂ÈáäÊîæÂç†Áî®Á´ØÂè£ 53/54/55 ÁöÑÂÆπÂô®ÊàñËøõÁ®ã + Ê∏ÖÁêÜÊóßÈÖçÁΩÆÁõÆÂΩï
# ==================================================================
cleanup_environment() {
  PORTS="53 54 55"                        # ÈúÄË¶ÅÊ£ÄÊü•ÁöÑÁ´ØÂè£ÂàóË°®
  TMP_CONTAINER=$(mktemp)                # Â≠òÂÇ®Âç†Áî®Á´ØÂè£ÁöÑÂÆπÂô®‰∏¥Êó∂Êñá‰ª∂
  TMP_PROCESS=$(mktemp)                  # Â≠òÂÇ®Âç†Áî®Á´ØÂè£ÁöÑÈùûÂÆπÂô®ËøõÁ®ã‰∏¥Êó∂Êñá‰ª∂

  echo "[7/14] Ê∏ÖÁêÜÊóßÂÆπÂô®Âπ∂ÈáäÊîæÁ´ØÂè£Âç†Áî®..."

  # Êü•ÊâæÁõëÂê¨Ëøô‰∫õÁ´ØÂè£ÁöÑ Docker ÂÆπÂô®
  for PORT in $PORTS; do
    docker ps --format '{{.ID}} {{.Names}} {{.Ports}}' | grep ":$PORT->" | while read ID NAME PORTMAP; do
      echo "$PORT $ID $NAME" >> "$TMP_CONTAINER"
    done
  done

  # Êü•ÊâæÁõëÂê¨Ëøô‰∫õÁ´ØÂè£ÁöÑÊú¨Âú∞ËøõÁ®ãÔºàÊéíÈô§ docker-proxyÔºâ
  for PORT in $PORTS; do
    netstat -tulpn 2>/dev/null | grep ":$PORT" | while read -r line; do
      proto=$(echo "$line" | awk '{print $1}')         # ÂçèËÆÆÁ±ªÂûãÔºàtcp/udpÔºâ
      pid_info=$(echo "$line" | awk '{print $NF}')     # Ëé∑Âèñ PID/ËøõÁ®ãÂêç
      echo "$pid_info" | grep -qE '^[0-9]+/[^[:space:]]+$' || continue
      pid=$(echo "$pid_info" | cut -d'/' -f1)
      name=$(echo "$pid_info" | cut -d'/' -f2)
      [ "$name" = "docker-proxy" ] && docker ps | grep -q "$PORT" && continue
      echo "$PORT $proto $pid $name" >> "$TMP_PROCESS"
    done
  done

  # Â¶ÇÊûúÊ≤°ÊúâÂÆπÂô®ÊàñËøõÁ®ãÂç†Áî®Á´ØÂè£ÔºåÂàôÁõ¥Êé•ÈÄÄÂá∫
  if [ ! -s "$TMP_CONTAINER" ] && [ ! -s "$TMP_PROCESS" ]; then
    echo "‚úÖ Ê≤°ÊúâÂèëÁé∞‰ªª‰ΩïÈúÄË¶ÅÈáäÊîæÁöÑÁ´ØÂè£Âç†Áî®„ÄÇ"
  else
    echo "üìù ‰ª•‰∏ãÂØπË±°Â∞ÜË¢´ÈáäÊîæÔºö"
    [ -s "$TMP_CONTAINER" ] && awk '{printf "  ‚Üí ÂÆπÂô® %s (%s) ÁõëÂê¨Á´ØÂè£ %s\n", $3, $2, $1}' "$TMP_CONTAINER"
    [ -s "$TMP_PROCESS" ] && awk '{printf "  ‚Üí [%s] Á´ØÂè£ %s - PID=%s - Á±ªÂûã=%s - ËøõÁ®ãÂêç=%s\n", $2, $1, $3, $2, $4}' "$TMP_PROCESS"

    echo ""
    if [ -t 0 ]; then
      echo -n "‚ö†Ô∏è ÊòØÂê¶ÁªàÊ≠¢Ëøô‰∫õÂÆπÂô® / ËøõÁ®ãÔºü[y/N]: "
      read CONFIRM
    else
      echo "‚ö†Ô∏è Èùû‰∫§‰∫íÊ®°Âºè‰∏ãÈªòËÆ§ÂèñÊ∂àÊìç‰Ωú„ÄÇ"
      CONFIRM="n"
    fi

    if [ "$CONFIRM" != "y" ] && [ "$CONFIRM" != "Y" ]; then
      echo "‚ùé Â∑≤ÂèñÊ∂àÊìç‰Ωú„ÄÇ"
      rm -f "$TMP_CONTAINER" "$TMP_PROCESS"
      exit 0
    fi

    echo ""
    echo "üõ†Ô∏è Ê≠£Âú®ÊâßË°åÈáäÊîæÊìç‰Ωú..."

    # ÂÅúÊ≠¢Âπ∂Âà†Èô§Âç†Áî®Á´ØÂè£ÁöÑÂÆπÂô®
    [ -s "$TMP_CONTAINER" ] && sort -u "$TMP_CONTAINER" | awk '{print $2}' | sort -u | while read ID; do
      echo "  üõë ÂÅúÊ≠¢ÂÆπÂô® $ID ..."
      docker stop "$ID" > /dev/null 2>&1 && echo "     ‚úÖ Â∑≤ÂÅúÊ≠¢" || echo "     ‚ùå ÂÅúÊ≠¢Â§±Ë¥•"
      echo "  ‚ùå Âà†Èô§ÂÆπÂô® $ID ..."
      docker rm "$ID" > /dev/null 2>&1 && echo "     ‚úÖ Â∑≤Âà†Èô§" || echo "     ‚ùå Âà†Èô§Â§±Ë¥•"
    done

    # ÁªàÊ≠¢Âç†Áî®Á´ØÂè£ÁöÑÈùûÂÆπÂô®ËøõÁ®ã
    [ -s "$TMP_PROCESS" ] && awk '{print $3}' "$TMP_PROCESS" | sort -u | while read PID; do
      echo "  üî™ ÁªàÊ≠¢ËøõÁ®ã PID=$PID ..."
      kill "$PID" 2>/dev/null && echo "     ‚úÖ Â∑≤ÁªàÊ≠¢ (TERM)" || {
        kill -9 "$PID" 2>/dev/null && echo "     ‚ö†Ô∏è Â∑≤Âº∫Âà∂ÁªàÊ≠¢ (KILL)" || echo "     ‚ùå Êó†Ê≥ïÁªàÊ≠¢ËøõÁ®ã PID=$PID"
      }
    done
  fi

  # Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂ÂíåÈÖçÁΩÆÁõÆÂΩï
  rm -f "$TMP_CONTAINER" "$TMP_PROCESS"

  echo ""
  echo "üßπ Ê∏ÖÁêÜÈÖçÁΩÆÁõÆÂΩï..."
  rm -rf "$MOSDNS_DIR" "$ADH_CN_DIR" "$ADH_GFW_DIR"
  mkdir -p "$MOSDNS_DIR"
  echo "‚úÖ ÁéØÂ¢ÉÊ∏ÖÁêÜÂÆåÊàê„ÄÇ"
}

# --------------------------------------------------------------------------
# [1/14] ËÆæÁΩÆ APK ÈïúÂÉèÊ∫ê‰∏∫‰∏≠ÁßëÂ§ß
# --------------------------------------------------------------------------
echo "[1/14] ËÆæÁΩÆ APK ÈïúÂÉèÊ∫ê‰∏∫‰∏≠ÁßëÂ§ß..."
grep -q ustc /etc/apk/repositories 2>/dev/null || {
cat >/etc/apk/repositories <<-'EOF'
https://mirrors.ustc.edu.cn/alpine/latest-stable/main
https://mirrors.ustc.edu.cn/alpine/latest-stable/community
EOF
apk update
}

# --------------------------------------------------------------------------
# [2/14] ÂÆâË£Ö open-vm-tools
# --------------------------------------------------------------------------
echo "[2/14] ÂÆâË£Ö open-vm-tools..."
apk add --no-cache open-vm-tools
rc-update add open-vm-tools default    # ËÆæÁΩÆÂºÄÊú∫ÂêØÂä®
rc-service open-vm-tools start         # ÂêØÂä®ÊúçÂä°

# --------------------------------------------------------------------------
# [3/14] ÂÆâË£Ö vim Âíå‰∏≠ÊñáÊîØÊåÅ
# --------------------------------------------------------------------------
echo "[3/14] ÂÆâË£Ö vim Âíå‰∏≠ÊñáÊîØÊåÅ..."
apk add --no-cache vim musl-locales musl-locales-lang less

# ËÆæÁΩÆ‰∏≠ÊñáÁéØÂ¢ÉÂèòÈáè
cat << 'EOF' >/etc/profile.d/locale.sh
export LANG=zh_CN.UTF-8
export LC_CTYPE=zh_CN.UTF-8
export LC_ALL=zh_CN.UTF-8
EOF
chmod +x /etc/profile.d/locale.sh
. /etc/profile.d/locale.sh

# ËÆæÁΩÆ Vim ÈªòËÆ§ÁºñÁ†Å
cat << 'EOF' >/etc/vim/vimrc
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,default,latin1
EOF

# --------------------------------------------------------------------------
# [4/14] ÂÆâË£ÖÂπ∂ÂêØÂä® Docker
# --------------------------------------------------------------------------
echo "[4/14] ÂÆâË£ÖÂπ∂ÂêØÂä® Docker..."
apk add --no-cache docker
rc-update add docker boot             # ËÆæÁΩÆ‰∏∫ÂºÄÊú∫Ëá™ÂêØ
rc-service docker start               # ÂêØÂä® Docker ÊúçÂä°

# --------------------------------------------------------------------------
# [5/14] ËÆæÁΩÆ Docker ÈïúÂÉèÂä†ÈÄüÂô®
# --------------------------------------------------------------------------
echo "[5/14] ÈÖçÁΩÆ Docker ÈïúÂÉèÂä†ÈÄü..."
mkdir -p /etc/docker
cat >/etc/docker/daemon.json <<-'EOF'
{
  "registry-mirrors": [
    "https://docker.m.daocloud.io",
    "https://dockerproxy.com",
    "https://mirror.baidubce.com",
    "https://docker.nju.edu.cn",
    "https://docker.mirrors.sjtug.sjtu.edu.cn",
    "https://mirror.iscas.ac.cn"
  ]
}
EOF
service docker restart  # Â∫îÁî®Êñ∞ÈïúÂÉèÂä†ÈÄüÈÖçÁΩÆ

# --------------------------------------------------------------------------
# [6/14] ÂÆâË£Ö docker-compose Âíå net-tools Â∑•ÂÖ∑
# --------------------------------------------------------------------------
echo "[6/14] ÂÆâË£Ö docker-compose Âíå net-tools..."
apk add --no-cache docker-compose net-tools curl

# --------------------------------------------------------------------------
# [7/14] ÊâßË°åÁéØÂ¢ÉÊ∏ÖÁêÜÂáΩÊï∞
# --------------------------------------------------------------------------
cleanup_environment

# --------------------------------------------------------------------------
# [8/14] ÈÉ®ÁΩ≤ AdGuardHome ÂõΩÂÜÖÂÆû‰æã
# --------------------------------------------------------------------------
echo "[8/14] ÈÉ®ÁΩ≤ AdH_CN..."
mkdir -p "$ADH_CN_DIR/conf" "$ADH_CN_DIR/work"
curl -fsSL https://goppx.com/https://raw.githubusercontent.com/dayunliang/Customized_Config_Files/refs/heads/main/mosdns/conf/AdH_CN.yaml -o "$ADH_CN_DIR/conf/AdGuardHome.yaml"
curl -fsSL https://goppx.com/https://raw.githubusercontent.com/dayunliang/Customized_Config_Files/refs/heads/main/mosdns/docker-compose/AdH_CN -o "$ADH_CN_DIR/docker-compose.yaml"
cd "$ADH_CN_DIR"
docker-compose up -d --force-recreate   # Âº∫Âà∂ÈáçÊñ∞ÂàõÂª∫Âπ∂ÂêØÂä®ÂÆπÂô®

# --------------------------------------------------------------------------
# [9/14] ÈÉ®ÁΩ≤ AdGuardHome GFW ÂÆû‰æã
# --------------------------------------------------------------------------
echo "[9/14] ÈÉ®ÁΩ≤ AdH_GFW..."
mkdir -p "$ADH_GFW_DIR/conf" "$ADH_GFW_DIR/work"
curl -fsSL https://goppx.com/https://raw.githubusercontent.com/dayunliang/Customized_Config_Files/refs/heads/main/mosdns/conf/AdH_GFW.yaml -o "$ADH_GFW_DIR/conf/AdGuardHome.yaml"
curl -fsSL https://goppx.com/https://raw.githubusercontent.com/dayunliang/Customized_Config_Files/refs/heads/main/mosdns/docker-compose/AdH_GFW -o "$ADH_GFW_DIR/docker-compose.yaml"
cd "$ADH_GFW_DIR"
docker-compose up -d --force-recreate

# --------------------------------------------------------------------------
# [10/14] ‰∏ãËΩΩ MosDNS ÁöÑ docker-compose ‰∏é update.sh
# --------------------------------------------------------------------------
echo "[10/14] ‰∏ãËΩΩ MosDNS ÈÖçÁΩÆÂèä update.sh..."
cd "$MOSDNS_DIR"
curl -fsSL https://goppx.com/https://raw.githubusercontent.com/dayunliang/Customized_Config_Files/refs/heads/main/mosdns/docker-compose/mosdns -o ./docker-compose.yaml
curl -fsSL https://goppx.com/https://raw.githubusercontent.com/dayunliang/Customized_Config_Files/main/mosdns/update.sh -o ./update.sh
chmod +x update.sh
./update.sh   # ÂàùÊ¨°ÊâßË°åÊõ¥Êñ∞ËÑöÊú¨

# --------------------------------------------------------------------------
# [11/14] ËÆæÁΩÆ cron ÊØèÂë®‰∏ÄÂáåÊô® 4 ÁÇπËá™Âä®Êõ¥Êñ∞
# --------------------------------------------------------------------------
echo "[11/14] ËÆæÁΩÆ cron Ëá™Âä®Êõ¥Êñ∞..."
touch "$CRONTAB_FILE"
sed -i '\#cd '"$MOSDNS_DIR"' && ./update.sh#d' "$CRONTAB_FILE"
echo "0 4 * * 1 cd $MOSDNS_DIR && ./update.sh >> $MOSDNS_DIR/update.log 2>&1" >> "$CRONTAB_FILE"

# --------------------------------------------------------------------------
# [12/14] ‰∏ãËΩΩËßÑÂàôÂíåÁ©∫ÁôΩÂêçÂçïÊñá‰ª∂
# --------------------------------------------------------------------------
echo "[12/14] ‰∏ãËΩΩËßÑÂàôÂíåÁ©∫ÁôΩÂêçÂçï..."
mkdir -p "$MOSDNS_DIR/rules-dat"
: > "$MOSDNS_DIR/rules-dat/geoip_private.txt"

mkdir -p "$MOSDNS_DIR/config/rule"
cd "$MOSDNS_DIR/config"
for f in config_custom.yaml dns.yaml dat_exec.yaml; do
  curl -fsSL "https://goppx.com/https://raw.githubusercontent.com/dayunliang/Customized_Config_Files/main/mosdns/config/$f" -o "$f"
done
cd rule
: > whitelist.txt
: > greylist.txt

# --------------------------------------------------------------------------
# [13/14] ÂêØÂä® MosDNS ÊúçÂä°ÂÆπÂô®
# --------------------------------------------------------------------------
echo "[13/14] ÂêØÂä® MosDNS..."
cd "$MOSDNS_DIR"
docker-compose up -d --force-recreate

# --------------------------------------------------------------------------
# [14/14] ÊèêÁ§∫ÊâÄÊúâÊúçÂä°ÈÉ®ÁΩ≤ÂÆåÊàê
# --------------------------------------------------------------------------
echo "‚úÖ ÊâÄÊúâÊúçÂä°ÈÉ®ÁΩ≤ÂÆåÊàê"
echo "üìå Ê≠£Âú®ËøêË°åÁöÑÂÆπÂô®Ôºö"
docker ps
echo "üìå Êü•ÁúãÊó•ÂøóÔºödocker-compose logs -f mosdns"
